# -*- coding: utf-8 -*-
"""preprocess_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13aofZgap8RC3OIGLVPi0hkPAIjmx7xtM
"""
"""
from google.colab import drive
drive.mount('/content/drive')

# cd /content/drive/My Drive/Walmart_Competition/
cd /content/drive/My Drive/Walmart_Competition

ls"""

# Commented out IPython magic to ensure Python compatibility.
# Imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

def data_preprocess():
    
  df_features = pd.read_csv('features.csv')
  df_stores = pd.read_csv('stores.csv')
  df_test = df_test_for_submission = pd.read_csv('test.csv')
  df_train = pd.read_csv('train.csv')

  data_frame = pd.merge(df_train,df_features,on=['Store','Date','IsHoliday'])
  data_frame_test = pd.merge(df_test,df_features,on=['Store','Date','IsHoliday'])

  data_frame = pd.merge(data_frame,df_stores,on='Store')
  data_frame_test = pd.merge(data_frame_test,df_stores,on='Store')

  data_frame.fillna(0,inplace=True)
  data_frame_test.fillna(0,inplace=True)

  """print(data_frame.isna().sum())
  print("-----------------------")
  print(data_frame_test.isna().sum())"""

  data_frame["Weekly_Sales"] = np.where(data_frame["Weekly_Sales"] < 0,0,data_frame["Weekly_Sales"])
  data_frame["MarkDown2"] = np.where(data_frame["MarkDown2"] < 0,0,data_frame["MarkDown2"])
  data_frame["MarkDown3"] = np.where(data_frame["MarkDown3"] < 0,0,data_frame["MarkDown3"])

  data_frame_test["MarkDown2"] = np.where(data_frame_test["MarkDown2"] < 0,0,data_frame_test["MarkDown2"])
  data_frame_test["MarkDown3"] = np.where(data_frame_test["MarkDown3"] < 0,0,data_frame_test["MarkDown3"])

  """print(data_frame["Type"].unique())
  print(data_frame_test["Type"].unique())"""

  data_frame["Date"] = pd.to_datetime(data_frame["Date"])
  data_frame["Year"] = data_frame["Date"].dt.year
  data_frame["Month"] = data_frame["Date"].dt.month
  data_frame["Day"] = data_frame["Date"].dt.day

  data_frame_test["Date"] = pd.to_datetime(data_frame_test["Date"])
  data_frame_test["Year"] = data_frame_test["Date"].dt.year
  data_frame_test["Month"] = data_frame_test["Date"].dt.month
  data_frame_test["Day"] = data_frame_test["Date"].dt.day

  data_frame = data_frame.drop("Date",axis=1)
  data_frame_test = data_frame_test.drop("Date",axis=1)

  data_frame["IsHoliday"] = data_frame["IsHoliday"].astype(int)  # False = 0, True = 1
  data_frame_test["IsHoliday"] = data_frame_test["IsHoliday"].astype(int)

  from sklearn.preprocessing import LabelEncoder
  le = LabelEncoder()
  data_frame["Type"] = le.fit_transform(data_frame["Type"])
  data_frame_test["Type"] = le.fit_transform(data_frame_test["Type"])

  y = data_frame["Weekly_Sales"].values
  X = data_frame.drop(["Weekly_Sales","IsHoliday","CPI","Unemployment","MarkDown1","Year"],axis=1)
  wmae_feature = data_frame["IsHoliday"].values
  X_test = data_frame_test.drop(["IsHoliday","CPI","Unemployment","MarkDown1","Year"],axis=1)

  from sklearn.preprocessing import MinMaxScaler
  from sklearn.preprocessing import StandardScaler
  sc = StandardScaler()
  min_max_X = MinMaxScaler()
  min_max_y = MinMaxScaler()

  X = min_max_X.fit_transform(X)
  X_test = min_max_X.transform(X_test)
  y = y.reshape(-1,1)
  y = min_max_y.fit_transform(y)

  X = np.array(X)
  y = np.array(y)

  X_test = np.array(X_test)
  """
  print(X.shape,y.shape)
  print(X_test.shape)"""

  return X,X_test,y,wmae_feature,df_test_for_submission,min_max_y

_ = data_preprocess()

